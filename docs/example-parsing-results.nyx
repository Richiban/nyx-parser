
Definition (
  spec = Spec (
    FunctionType (
      Tuple [
        TypeIdentifier "wa.Wid"
        TypeIdentifier "camdTypes.GroupName"
      ]
      Tag "ok"
    )
  ),
  def = FunctionDefinition (
    name = "deleteDeviceIfNotOverlimited"
    arg = Tuple [
      ValueBinding "wid"
      ValueBinding "camGroup"
    ]
    body = StatementList [
      Definition (
        spec = None
        name = "key"
        body = Expression (
          FunctionCall (
            name = "wa.getUid"
            arg = SingletonArg (
              body = ValueExpression "wid"
            )
          )
        )
      )
      Definition (
        spec = None
        name = "product"
        body = FunctionCall (
          name = "wa.getProduct"
          arg = SingletonArg (
            body = ValueExpression "wid"
          )
        )
      )
      MatchExpression (
        target = FuctionCall (
          name = "waCamClient.checkAndUpdateLimit"
          arg = TupleLiteral [
            UnnamedTupleElement (
              ValueExpression "camGroup"
            )
            UnnamedTupleElement (
              ValueExpression "key"
            )
            UnnamedTupleElement (
              ValueExpression "1"
            )
            UnnamedTupleElement (
              ValueExpression "product"
            )
          ]
        ),
        cases = [
          MatchCase (
            pattern = TagPattern "overlimit",
            body = StatementList [
              FunctionCall (
                name = "countProduct"
                arg = TupleLiteral [
                  UnnamedTupleElement (
                    ValueExpression
                  )
                  UnnamedTupleElement (
                    TupleLiteral (
                      UnnamedTupleElement (
                        TagExpression "handle_iq_companion_devices"
                      )
                      UnnamedTupleElement (
                        ValueExpression "camGroup"
                      )
                      UnnamedTupleElement (
                        TagExpression "overlimit"
                      )
                    )
                  )
                ]
              )
            ]
          )
          MatchCase (
            pattern = TagPattern "ok",
            body = StatementList [
              FunctionCall (
                name = "waDeldClient.deleteDevice"
                arg = TupleLiteral [
                  UnnamedTupleElement (
                    ValueExpression "wid"
                  )
                  UnnamedTupleElement (
                    ValueExpression "wid"
                  )
                  UnnamedTupleElement (
                    TagExpression "natural"
                  )
                  UnnamedTupleElement (
                    ValueExpression "false"
                  )
                  UnnamedTupleElement (
                    TupleLiteral [
                      UnnamedTupleElement (
                        NamedTupleElement (
                          name = "callerId"
                          value = ValueExpression "wid"
                        )
                      )
                    ]
                  )
                ]
              )
            ]
          )
        ]
      )
      TagExpression "ok"
    ]
  )
)


(*

function deleteDeviceIfNotOverlimited(wid, camGroup) {
  const key = wa.getUid(wid);
  const product = wa.getProduct(wid);

  const $r = wa_cam_client.checkAndUpdateLimit(
    {"group": camGroup, "key": key, "num": 1, "target": product});

  if ($r === Symbol.for('overlimit')) {
    countProduct({
      "wid": wid, 
      "args": [Symbol.for('handle_iq_companion_devices'), camGroup, Symbol.for('overlimit')]
    });
  } else if ($r === Symbol.for('ok')) {
    waDeldClient.deleteDevice({
      "WID": wid,
      "ActingWID": wid,
      "Reason": Symbol.for('natural'),
      "LogEvent": false,
      "Options0": {callerId: wid}
    });
  }

  return 'ok';
}

*)